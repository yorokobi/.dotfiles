"autocmd BufEnter * :lcd %:p:h

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

if has("autocmd")
    filetype plugin on
    filetype indent on

    " Keep cursor in the center of the window
    "auto CursorMoved * normal zz

endif

" Make UTF-8
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

" Try and enable color for xterms
if &term =~ 'xterm'
    if has("terminfo")
        set t_Co=8
        set t_Sf=[3%p1%dm
        set t_Sb=[4%p1%dm
        set t_ts=]2;
        set t_fs=
    else
        set t_Co=8
        set t_Sf=[3%dm
        set t_Sb=[4%dm
    endif
endif

if &term =~ '-256color'
    if has("terminfo")
        set t_Co=256
        set t_Sf=[3%p1%dm
        set t_Sb=[4%p1%dm
        set t_ts=]2;
        set t_fs=
    else
        set t_Co=256
        set t_Sf=[3%dm
        set t_Sb=[4%dm
    endif
endif

" Switch syntax highlighting on
syntax on
set hlsearch
set modeline

" Display bufnr:filetype (dos,unix,mac) in status line
set statusline=%<%n:%f%h%m%r%=%{&ff}\ %l,%c%V\ %P

" === VERSION 5.00 AND UP SETTINGS ===
" Only do this for Vim version 5.0 and later.
if version >= 500

    "set notitle

    set softtabstop=2
    set shiftwidth=2
    set smartcase
    set number
    set noequalalways
    "set smartindent
"    set backspace=indent,start
    
    set incsearch           " show where the command pattern matches
    set bs=2		        " allow backspacing over everything in insert mode
    set ai			        " always set autoindenting on
    set et					" Use spaces instead of tab when <TAB> is pressed
    set sta					" Split the window for the found tag
    "set tw=78				" Auto wrap text at 78 chars
    set nobackup	        " don't keep a backup file
    "set viminfo='20,\"50	" read/write a .viminfo file, don't store more
    			            " than 50 lines of registers
    set history=50		    " keep 50 lines of command line history
    set ruler		        " show the cursor position all the time
    set cursorline          " highlight the line the cursor is on
    set cursorcolumn        " highlight the column the cursor is on
    "set nowrap              " make sure that long lines don't wrap
    set wrap
    set background=dark     " Make sure we have a nice dark background
    set laststatus=2        " Make sure the status line is always displayed

    " Hide the mouse pointer while typing
    " The window with the mouse pointer does not automatically become the active window
    " Right mouse button extends selections
    " Turn on mouse support
    set mousehide
    set nomousefocus
    set mousemodel=extend
    set mouse=a

    " Show paren matches
    " For 5 tenths of a second
    set showmatch
    set matchtime=5

    let g:solarized_termcolors=256
    let g:solarized_termtrans=0
    let g:solarized_degrade=0
    let g:solarized_bold=1
    let g:solarized_underline=1
    let g:solarized_italic=1
    let g:solarized_style="dark"
    let g:solarized_contrast="normal"

    " Nice default colorscheme
    colorscheme solarized
    " https://github.com/lifepillar/vim-solarized8
    "colorscheme solarized8

    " Make comments italic (where supported by terminal/font)
    hi Comment cterm=italic

    " Working on building nice development environment
    "map <Leader>v :vsplit<CR>:vertical resize 20<CR>:Explore<CR><C-W>l<C-W>sz1<CR><C-W>j<C-W>h

    runtime macros/matchit.vim

    " syntastic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_error_symbol = 'âœ—'

endif

" Map H to stop highlighting search matches
noremap H :set hlsearch!<CR>

" Make shift-insert work like in Xterm
noremap <S-Insert> <MiddleMouse>
noremap! <S-Insert> <MiddleMouse>

set number
set numberwidth=4
map <F4> :set number! <cr>

" Taken from http://vimcasts.org/episodes/indentation-commands/
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" Change date/time format for vim's bash-support plugin
let g:BASH_FormatDate = '%F'
let g:BASH_FormatTime = '%T %z'
let g:BASH_FormatYear = '%Y'

" Terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" Seeing is Believing (Ruby)
" https://github.com/hwartig/vim-seeing-is-believing
let g:xmpfilter_cmd = "seeing_is_believing"

autocmd FileType ruby nmap <buffer> <F2> <Plug>(seeing_is_believing-clean)
autocmd FileType ruby xmap <buffer> <F2> <Plug>(seeing_is_believing-clean)
autocmd FileType ruby imap <buffer> <F2> <Plug>(seeing_is_believing-clean)

autocmd FileType ruby nmap <buffer> <F3> <Plug>(seeing_is_believing-mark)
autocmd FileType ruby xmap <buffer> <F3> <Plug>(seeing_is_believing-mark)
autocmd FileType ruby imap <buffer> <F3> <Plug>(seeing_is_believing-mark)

" auto insert mark at appropriate spot.
autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby xmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing_is_believing-run)

" xmpfilter compatible
autocmd FileType ruby nmap <buffer> <F6> <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby xmap <buffer> <F6> <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby imap <buffer> <F6> <Plug>(seeing_is_believing-run_-x)

" NerdTree
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
